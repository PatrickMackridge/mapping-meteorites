{"version":3,"sources":["components/MeteoriteTable.jsx","utils/utils.js","components/HeatMap.jsx","components/MarkerMap.jsx","components/MakeMap.jsx","components/DoDoughnut.jsx","App.js","index.js"],"names":["MeteoriteTable","props","className","meteorites","map","meteorite","key","id","name","mass","geolocation","latitude","longitude","year","formatSizeData","arrayOfMeteorites","result","forEach","formatLargeSizeData","formatHemisphereData","formatCenturyData","formatHeatMapData","filter","isNaN","intensity","HeatMap","state","locationData","componentDidUpdate","prevProps","prevState","setState","this","currentState","points","longitudeExtractor","latitudeExtractor","intensityExtractor","marker","radius","blur","Component","MarkerMap","Marker","position","Popup","style","height","width","MakeMap","heatMap","Map","center","zoom","TileLayer","url","attribution","React","DoDoughnut","chartData","labels","datasets","label","data","backgroundColor","hoverBackgroundColor","borderColor","chartCreated","formatData","dropdownVal","formatSizes","formatHemispheres","formatCenturies","formattedData","newLabels","length","newData","options","maintainAspectRatio","App","largestMeteorites","doughnutDataVal","isLoading","showLargest100","fetchData","fetch","then","response","json","meteoriteData","meteoriteCopy","undefined","slice","parseFloat","toFixed","slicedMeteorites","getLargest100","toggleHeatMap","changeDropdown","event","target","value","selectedMeteorites","onClick","onChange","ReactDOM","render","document","getElementById"],"mappings":"0OAmCeA,G,MAjCQ,SAAAC,GACrB,OACE,yBAAKC,UAAU,kBACb,+BACE,+BACE,4BACE,oCACA,yCACA,2CACA,sCAGHD,EAAME,WAAWC,KAAI,SAAAC,GACpB,OACE,2BAAOC,IAAKD,EAAUE,IACpB,4BACE,4BAAKF,EAAUG,MACf,4BAAKH,EAAUI,KAAO,KACtB,gCACIJ,EAAUK,YAAYC,SAD1B,SAEMN,EAAUK,YAAYE,UAF5B,SAKA,4BAAKP,EAAUQ,e,iCCzBzBC,EAAiB,SAACC,GACtB,IAAIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAe1B,OAbAD,EAAkBE,SAAQ,SAACZ,GACrBA,EAAUI,MAAQ,IACpBO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EAEbA,EAAO,IAAM,KAGVA,GAGHE,EAAsB,SAACH,GAC3B,IAAIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAe1B,OAbAD,EAAkBE,SAAQ,SAACZ,GACrBA,EAAUI,MAAQ,IACpBO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EACJX,EAAUI,MAAQ,IAC3BO,EAAO,IAAM,EAEbA,EAAO,IAAM,KAGVA,GAGHG,EAAuB,SAACJ,GAC5B,IAAIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GA2B1B,OAzBAD,EAAkBE,SAAQ,SAACZ,GAEvBA,EAAUK,YAAYC,SAAW,GACjCN,EAAUK,YAAYE,UAAY,EAElCI,EAAO,IAAM,EAEbX,EAAUK,YAAYC,SAAW,GACjCN,EAAUK,YAAYE,UAAY,EAElCI,EAAO,IAAM,EAEbX,EAAUK,YAAYC,SAAW,GACjCN,EAAUK,YAAYE,UAAY,EAElCI,EAAO,IAAM,EAEbX,EAAUK,YAAYC,SAAW,GACjCN,EAAUK,YAAYE,UAAY,EAElCI,EAAO,IAAM,EAEbA,EAAO,IAAM,KAGVA,GAGHI,EAAoB,SAACL,GACzB,IAAIC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAc1B,OAbAD,EAAkBE,SAAQ,SAACZ,GACrBA,EAAUQ,KAAO,KACnBG,EAAO,IAAM,EACJX,EAAUQ,KAAO,KAC1BG,EAAO,IAAM,EACJX,EAAUQ,KAAO,KAC1BG,EAAO,IAAM,EACJX,EAAUQ,KAAO,IAC1BG,EAAO,IAAM,EAEbA,EAAO,IAAM,KAGVA,GAGHK,EAAoB,SAACN,GAUzB,OATqBA,EAAkBO,QAAO,SAACjB,GAC7C,OACGkB,MAAMlB,EAAUK,YAAYC,YAC5BY,MAAMlB,EAAUK,YAAYE,cAGER,KAAI,SAACC,GACtC,OAAO,eAAKA,EAAUK,YAAtB,CAAmCc,UAAW,UCzDnCC,E,2MAjCbC,MAAQ,CACNvB,WAAY,EAAKF,MAAME,WACvBwB,aAAc,I,EAUhBC,mBAAqB,SAACC,EAAWC,GAC3BD,EAAU1B,aAAe,EAAKF,MAAME,YACtC,EAAK4B,SAAS,CAAEJ,aAAcN,EAAkB,EAAKpB,MAAME,e,mFAR7D6B,KAAKD,UAAS,SAACE,GAEb,MAAO,CAAEN,aADeN,EAAkBY,EAAa9B,kB,+BAWjD,IACAwB,EAAiBK,KAAKN,MAAtBC,aACR,OACE,kBAAC,IAAD,CACEO,OAAQP,EACRQ,mBAAoB,SAACzB,GAAD,OAAiBA,EAAYE,WACjDwB,kBAAmB,SAAC1B,GAAD,OAAiBA,EAAYC,UAChD0B,mBAAoB,SAACC,GAAD,OAAYA,EAAOd,WACvCe,OAAQ,GACRC,KAAM,S,GA5BQC,a,gBC2CPC,E,2MA3CbhB,MAAQ,CACNvB,WAAY,EAAKF,MAAME,Y,kFAGN0B,EAAWC,GACxBD,EAAU1B,aAAe6B,KAAK/B,MAAME,YACtC6B,KAAKD,SAAS,CAAE5B,WAAY6B,KAAK/B,MAAME,e,+BAIjC,IACAA,EAAe6B,KAAKN,MAApBvB,WACR,OACE,oCACG,IACAA,EAAWC,KAAI,SAACC,GACf,MAA0C,YAAnCA,EAAUK,YAAYC,SAC3B,kBAACgC,EAAA,EAAD,CACErC,IAAKD,EAAUE,GACfqC,SAAU,CACRvC,EAAUK,YAAYC,SACtBN,EAAUK,YAAYE,YAGxB,kBAACiC,EAAA,EAAD,CAAOC,MAAO,CAAEC,OAAQ,EAAGC,MAAO,IAChC,yBAAKzC,GAAG,cACN,4BAAKF,EAAUG,MACf,uBAAGD,GAAG,cAAN,SAA0BF,EAAUI,KAAO,IAAO,OAClD,uBAAGF,GAAG,cAAN,gBACgBF,EAAUK,YAAYC,SADtC,SACsD,IACnDN,EAAUK,YAAYE,UAFzB,UAIA,uBAAGL,GAAG,cAAN,SAA0BF,EAAUQ,SAIxC,a,GArCU4B,aCmCTQ,E,2MAhCbvB,MAAQ,CACNvB,WAAY,EAAKF,MAAME,WACvB+C,QAAS,EAAKjD,MAAMiD,S,kFAGHrB,EAAWC,GACxBE,KAAK/B,MAAME,aAAe0B,EAAU1B,YACtC6B,KAAKD,SAAS,CAAE5B,WAAY6B,KAAK/B,MAAME,aAErC6B,KAAK/B,MAAMiD,UAAYrB,EAAUqB,SACnClB,KAAKD,SAAS,CAAEmB,QAASlB,KAAK/B,MAAMiD,Y,+BAI9B,IAAD,EACyBlB,KAAKN,MAA7BvB,EADD,EACCA,WAAY+C,EADb,EACaA,QACpB,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,GAAM,IAAOC,KAAM,GAC/B,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,6EAED,IAAZN,EACC,kBAAC,EAAD,CAAS/C,WAAY6B,KAAK/B,MAAME,aAEhC,kBAAC,EAAD,CAAWA,WAAYA,S,GA1BXsD,IAAMhB,W,QCmIbiB,E,2MA7HbhC,MAAQ,CACNiC,UAAW,CACTC,OAAQ,GACRC,SAAU,CACR,CACEC,MAAO,qBACPC,KAAM,GACNC,gBAAiB,CACf,UACA,UACA,UACA,UACA,WAEFC,qBAAsB,CACpB,UACA,UACA,UACA,UACA,WAEFC,YAAa,wBAInBC,cAAc,G,EAGhBC,WAAa,SAACC,GACQ,cAAhBA,EACF,EAAKC,cACoB,eAAhBD,EACT,EAAKE,oBACoB,YAAhBF,GACT,EAAKG,mB,EAITF,YAAc,WAAO,IAGfG,EACAC,EAHIf,EAAc,EAAKjC,MAAnBiC,UACAxD,EAAe,EAAKF,MAApBE,WAGkB,MAAtBA,EAAWwE,QACbF,EAAgBvD,EAAoBf,GACpCuE,EAAY,CACV,gBACA,eACA,kBACA,gBACA,sBAGFD,EAAgB3D,EAAeX,GAC/BuE,EAAY,CACV,eACA,aACA,gBACA,cACA,oBAGJ,IAAME,EAAO,eAAQjB,GACrBiB,EAAQf,SAAS,GAAGE,KAAOU,EAC3BG,EAAQhB,OAASc,EACjB,EAAK3C,SAAS,CAAE4B,UAAWiB,EAAST,cAAc,K,EAGpDI,kBAAoB,WAAO,IACjBZ,EAAc,EAAKjC,MAAnBiC,UACAxD,EAAe,EAAKF,MAApBE,WACFsE,EAAgBtD,EAAqBhB,GAQrCyE,EAAO,eAAQjB,GACrBiB,EAAQf,SAAS,GAAGE,KAAOU,EAC3BG,EAAQhB,OATU,CAChB,SACA,SACA,SACA,SACA,oBAKF,EAAK7B,SAAS,CAAE4B,UAAWiB,EAAST,cAAc,K,EAGpDK,gBAAkB,WAAO,IACfb,EAAc,EAAKjC,MAAnBiC,UACAxD,EAAe,EAAKF,MAApBE,WACFsE,EAAgBrD,EAAkBjB,GAQlCyE,EAAO,eAAQjB,GACrBiB,EAAQf,SAAS,GAAGE,KAAOU,EAC3BG,EAAQhB,OATU,CAChB,WACA,YACA,YACA,YACA,QAKF,EAAK7B,SAAS,CAAE4B,UAAWiB,EAAST,cAAc,K,kFAGjCtC,EAAWC,GAAY,IAAD,EACHE,KAAK/B,MAAjCoE,EAD+B,EAC/BA,YAAalE,EADkB,EAClBA,WAEnB0B,EAAUwC,cAAgBA,GAC1BxC,EAAU1B,WAAWwE,SAAWxE,EAAWwE,QAE3C3C,KAAKoC,WAAWC,K,4EAMV,IACAV,EAAc3B,KAAKN,MAAnBiC,UAER,OACE,yBAAKzD,UAAU,qBACb,kBAAC,IAAD,CAAU6D,KAAMJ,EAAWkB,QAHf,CAAEC,qBAAqB,U,GArHlBrC,aCmIVsC,E,2MAtIbrD,MAAQ,CACNvB,WAAY,GACZ6E,kBAAmB,GACnBC,gBAAiB,YACjBC,WAAW,EACXC,gBAAgB,EAChBjC,SAAS,G,EAGXkC,UAAY,WACVC,MAAM,kFAGHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACvB,GACL,IAAM0B,EAAgB1B,EAAK3D,KAAI,SAACC,GAC9B,IAAMqF,EAAa,eAAQrF,GAkB3B,YAjBkCsF,IAA9BD,EAAchF,cAChBgF,EAAchF,YAAc,CAC1BC,SAAU,UACVC,UAAW,YAGX8E,EAAc7E,KAChB6E,EAAc7E,KAAO6E,EAAc7E,KAAK+E,MAAM,EAAG,GACvCF,EAAc7E,OACxB6E,EAAc7E,KAAO,WAElB6E,EAAcjF,OACjBiF,EAAcjF,KAAO,WAGvBiF,EAAcjF,KAAOoF,WAAWH,EAAcjF,MAAMqF,QAAQ,GAErDJ,KAEHK,EAAmB,YAAIN,GAAeG,MAAM,EAAG,KACrD,EAAK7D,SAAS,CACZmD,WAAW,EACX/E,WAAYsF,EACZT,kBAAmBe,Q,EAK3BC,cAAgB,WACd,EAAKjE,UAAS,SAACE,GACb,MAAO,CACLkD,gBAAiBlD,EAAakD,oB,EAKpCc,cAAgB,WACd,EAAKlE,UAAS,SAACE,GACb,MAAO,CAAEiB,SAAUjB,EAAaiB,a,EAIpCgD,eAAiB,SAACC,GACZA,EAAMC,OAAOC,QAAU,EAAK3E,MAAMuD,iBACpC,EAAKlD,SAAS,CAAEkD,gBAAiBkB,EAAMC,OAAOC,S,mFAKhDrE,KAAKoD,c,6EAKG,IAUJkB,EAVG,EAQHtE,KAAKN,MANPvB,EAFK,EAELA,WACA6E,EAHK,EAGLA,kBACAC,EAJK,EAILA,gBACAC,EALK,EAKLA,UACAhC,EANK,EAMLA,QACAiC,EAPK,EAOLA,eAWF,OALEmB,GADqB,IAAnBnB,EACmBH,EAEA7E,EAIrB,yBAAKD,UAAU,OACb,kDACA,4BAAQA,UAAU,aAAaqG,QAASvE,KAAKiE,eAA7C,aAGe,IAAdf,EACC,4CAEA,kBAAC,EAAD,CAAS/E,WAAYmG,EAAoBpD,QAASA,IAEpD,yBAAKhD,UAAU,cACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,mBAAmBqG,QAASvE,KAAKgE,eAChDb,EAAiB,oBAAsB,0BAE3B,IAAdD,EACC,4CAEA,kBAAC,EAAD,CAAgB/E,WAAYmG,KAGhC,yBAAKpG,UAAU,gBACb,gDACiB,IACf,4BAAQK,GAAG,GAAGiG,SAAUxE,KAAKkE,gBAC3B,4BAAQG,MAAM,aAAd,cACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,WAAd,aAGJ,kBAAC,EAAD,CACElG,WAAYmG,EACZjC,YAAaY,EACbC,UAAWA,W,GA9HPzB,IAAMhB,WCDxBgE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.02ae7c42.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MeteoriteTable = props => {\n  return (\n    <div className=\"tableContainer\">\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Mass (kg)</th>\n            <th>Geolocation</th>\n            <th>Year</th>\n          </tr>\n        </thead>\n        {props.meteorites.map(meteorite => {\n          return (\n            <tbody key={meteorite.id}>\n              <tr>\n                <td>{meteorite.name}</td>\n                <td>{meteorite.mass / 1000}</td>\n                <td>\n                  ({meteorite.geolocation.latitude}\n                  °, {meteorite.geolocation.longitude}\n                  °)\n                </td>\n                <td>{meteorite.year}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </div>\n  );\n};\n\nexport default MeteoriteTable;\n","const formatSizeData = (arrayOfMeteorites) => {\n  let result = [0, 0, 0, 0, 0];\n\n  arrayOfMeteorites.forEach((meteorite) => {\n    if (meteorite.mass <= 50000) {\n      result[0] += 1;\n    } else if (meteorite.mass <= 100000) {\n      result[1] += 1;\n    } else if (meteorite.mass <= 200000) {\n      result[2] += 1;\n    } else if (meteorite.mass <= 300000) {\n      result[3] += 1;\n    } else {\n      result[4] += 1;\n    }\n  });\n  return result;\n};\n\nconst formatLargeSizeData = (arrayOfMeteorites) => {\n  let result = [0, 0, 0, 0, 0];\n\n  arrayOfMeteorites.forEach((meteorite) => {\n    if (meteorite.mass <= 500000) {\n      result[0] += 1;\n    } else if (meteorite.mass <= 1000000) {\n      result[1] += 1;\n    } else if (meteorite.mass <= 2000000) {\n      result[2] += 1;\n    } else if (meteorite.mass <= 5000000) {\n      result[3] += 1;\n    } else {\n      result[4] += 1;\n    }\n  });\n  return result;\n};\n\nconst formatHemisphereData = (arrayOfMeteorites) => {\n  let result = [0, 0, 0, 0, 0];\n\n  arrayOfMeteorites.forEach((meteorite) => {\n    if (\n      meteorite.geolocation.latitude > 0 &&\n      meteorite.geolocation.longitude > 0\n    ) {\n      result[0] += 1;\n    } else if (\n      meteorite.geolocation.latitude < 0 &&\n      meteorite.geolocation.longitude > 0\n    ) {\n      result[1] += 1;\n    } else if (\n      meteorite.geolocation.latitude < 0 &&\n      meteorite.geolocation.longitude < 0\n    ) {\n      result[2] += 1;\n    } else if (\n      meteorite.geolocation.latitude > 0 &&\n      meteorite.geolocation.longitude < 0\n    ) {\n      result[3] += 1;\n    } else {\n      result[4] += 1;\n    }\n  });\n  return result;\n};\n\nconst formatCenturyData = (arrayOfMeteorites) => {\n  let result = [0, 0, 0, 0, 0];\n  arrayOfMeteorites.forEach((meteorite) => {\n    if (meteorite.year < 1700) {\n      result[0] += 1;\n    } else if (meteorite.year < 1800) {\n      result[1] += 1;\n    } else if (meteorite.year < 1900) {\n      result[2] += 1;\n    } else if (meteorite.year < 2000) {\n      result[3] += 1;\n    } else {\n      result[4] += 1;\n    }\n  });\n  return result;\n};\n\nconst formatHeatMapData = (arrayOfMeteorites) => {\n  const filteredData = arrayOfMeteorites.filter((meteorite) => {\n    return (\n      !isNaN(meteorite.geolocation.latitude) &&\n      !isNaN(meteorite.geolocation.longitude)\n    );\n  });\n  const formattedData = filteredData.map((meteorite) => {\n    return { ...meteorite.geolocation, intensity: 100 };\n  });\n  return formattedData;\n};\n\nexport {\n  formatSizeData,\n  formatLargeSizeData,\n  formatHemisphereData,\n  formatCenturyData,\n  formatHeatMapData,\n};\n","import React, { Component } from \"react\";\nimport HeatMapLayer from \"react-leaflet-heatmap-layer\";\nimport { formatHeatMapData } from \"../utils/utils.js\";\n\nclass HeatMap extends Component {\n  state = {\n    meteorites: this.props.meteorites,\n    locationData: [],\n  };\n\n  componentDidMount() {\n    this.setState((currentState) => {\n      const newLocationData = formatHeatMapData(currentState.meteorites);\n      return { locationData: newLocationData };\n    });\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevProps.meteorites !== this.props.meteorites) {\n      this.setState({ locationData: formatHeatMapData(this.props.meteorites) });\n    }\n  };\n\n  render() {\n    const { locationData } = this.state;\n    return (\n      <HeatMapLayer\n        points={locationData}\n        longitudeExtractor={(geolocation) => geolocation.longitude}\n        latitudeExtractor={(geolocation) => geolocation.latitude}\n        intensityExtractor={(marker) => marker.intensity}\n        radius={25}\n        blur={10}\n      />\n    );\n  }\n}\n\nexport default HeatMap;\n","import React, { Component } from \"react\";\nimport { Marker, Popup } from \"react-leaflet\";\n\nclass MarkerMap extends Component {\n  state = {\n    meteorites: this.props.meteorites,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.meteorites !== this.props.meteorites) {\n      this.setState({ meteorites: this.props.meteorites });\n    }\n  }\n\n  render() {\n    const { meteorites } = this.state;\n    return (\n      <>\n        {\" \"}\n        {meteorites.map((meteorite) => {\n          return meteorite.geolocation.latitude !== \"Unknown\" ? (\n            <Marker\n              key={meteorite.id}\n              position={[\n                meteorite.geolocation.latitude,\n                meteorite.geolocation.longitude,\n              ]}\n            >\n              <Popup style={{ height: 0, width: 0 }}>\n                <div id=\"popup-info\">\n                  <h3>{meteorite.name}</h3>\n                  <p id=\"popup-info\">Mass: {meteorite.mass / 1000 + \" kg\"}</p>\n                  <p id=\"popup-info\">\n                    Geolocation: {meteorite.geolocation.latitude} lat.,{\" \"}\n                    {meteorite.geolocation.longitude} long.\n                  </p>\n                  <p id=\"popup-info\">Year: {meteorite.year}</p>\n                </div>\n              </Popup>\n            </Marker>\n          ) : null;\n        })}\n      </>\n    );\n  }\n}\n\nexport default MarkerMap;\n","import React from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport HeatMap from \"./HeatMap\";\nimport MarkerMap from \"./MarkerMap\";\n\nclass MakeMap extends React.Component {\n  state = {\n    meteorites: this.props.meteorites,\n    heatMap: this.props.heatMap,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.meteorites !== prevProps.meteorites) {\n      this.setState({ meteorites: this.props.meteorites });\n    }\n    if (this.props.heatMap !== prevProps.heatMap) {\n      this.setState({ heatMap: this.props.heatMap });\n    }\n  }\n\n  render() {\n    const { meteorites, heatMap } = this.state;\n    return (\n      <Map center={[20.0, 20.0]} zoom={2}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://osm.org.copyright\">OpenStreetMap</a> contributors'\n        />\n        {heatMap === true ? (\n          <HeatMap meteorites={this.props.meteorites} />\n        ) : (\n          <MarkerMap meteorites={meteorites} />\n        )}\n      </Map>\n    );\n  }\n}\n\nexport default MakeMap;\n","import React, { Component } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport {\n  formatSizeData,\n  formatLargeSizeData,\n  formatHemisphereData,\n  formatCenturyData,\n} from \"../utils/utils\";\nimport \"../App.css\";\n\nclass DoDoughnut extends Component {\n  state = {\n    chartData: {\n      labels: [],\n      datasets: [\n        {\n          label: \"Meteorite Landings\",\n          data: [],\n          backgroundColor: [\n            \"#FF6384\",\n            \"#36A2EB\",\n            \"#FFCE56\",\n            \"#001cac\",\n            \"#29ac00\",\n          ],\n          hoverBackgroundColor: [\n            \"#FF6384\",\n            \"#36A2EB\",\n            \"#FFCE56\",\n            \"#001cac\",\n            \"#29ac00\",\n          ],\n          borderColor: \"rgb(255, 255, 255)\",\n        },\n      ],\n    },\n    chartCreated: false,\n  };\n\n  formatData = (dropdownVal) => {\n    if (dropdownVal === \"sizeRange\") {\n      this.formatSizes();\n    } else if (dropdownVal === \"hemisphere\") {\n      this.formatHemispheres();\n    } else if (dropdownVal === \"century\") {\n      this.formatCenturies();\n    }\n  };\n\n  formatSizes = () => {\n    const { chartData } = this.state;\n    const { meteorites } = this.props;\n    let formattedData;\n    let newLabels;\n    if (meteorites.length === 100) {\n      formattedData = formatLargeSizeData(meteorites);\n      newLabels = [\n        \"500kg or less\",\n        \"501kg-1000kg\",\n        \"1001kg - 2000kg\",\n        \"2001kg-5000kg\",\n        \"More than 5000kg\",\n      ];\n    } else {\n      formattedData = formatSizeData(meteorites);\n      newLabels = [\n        \"50kg or less\",\n        \"51kg-100kg\",\n        \"101kg - 200kg\",\n        \"201kg-300kg\",\n        \"More than 300kg\",\n      ];\n    }\n    const newData = { ...chartData };\n    newData.datasets[0].data = formattedData;\n    newData.labels = newLabels;\n    this.setState({ chartData: newData, chartCreated: true });\n  };\n\n  formatHemispheres = () => {\n    const { chartData } = this.state;\n    const { meteorites } = this.props;\n    const formattedData = formatHemisphereData(meteorites);\n    const newLabels = [\n      \"NE Hem\",\n      \"SE Hem\",\n      \"SW Hem\",\n      \"NW Hem\",\n      \"Unknown Location\",\n    ];\n    const newData = { ...chartData };\n    newData.datasets[0].data = formattedData;\n    newData.labels = newLabels;\n    this.setState({ chartData: newData, chartCreated: true });\n  };\n\n  formatCenturies = () => {\n    const { chartData } = this.state;\n    const { meteorites } = this.props;\n    const formattedData = formatCenturyData(meteorites);\n    const newLabels = [\n      \"Pre 1700\",\n      \"1700-1799\",\n      \"1800-1899\",\n      \"1900-1999\",\n      \"200s\",\n    ];\n    const newData = { ...chartData };\n    newData.datasets[0].data = formattedData;\n    newData.labels = newLabels;\n    this.setState({ chartData: newData, chartCreated: true });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { dropdownVal, meteorites } = this.props;\n    if (\n      prevProps.dropdownVal !== dropdownVal ||\n      prevProps.meteorites.length !== meteorites.length\n    ) {\n      this.formatData(dropdownVal);\n    }\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { chartData } = this.state;\n    const options = { maintainAspectRatio: false };\n    return (\n      <div className=\"doughnutContainer\">\n        <Doughnut data={chartData} options={options} />\n      </div>\n    );\n  }\n}\n\nexport default DoDoughnut;\n","import React from \"react\";\nimport \"./App.css\";\nimport MeteoriteTable from \"./components/MeteoriteTable\";\nimport MakeMap from \"./components/MakeMap\";\nimport DoDoughnut from \"./components/DoDoughnut\";\n\nclass App extends React.Component {\n  state = {\n    meteorites: [],\n    largestMeteorites: [],\n    doughnutDataVal: \"sizeRange\",\n    isLoading: true,\n    showLargest100: false,\n    heatMap: false,\n  };\n\n  fetchData = () => {\n    fetch(\n      `https://data.nasa.gov/resource/gh4g-9sfh.json?$order=mass DESC&$where=mass > 0`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const meteoriteData = data.map((meteorite) => {\n          const meteoriteCopy = { ...meteorite };\n          if (meteoriteCopy.geolocation === undefined) {\n            meteoriteCopy.geolocation = {\n              latitude: \"Unknown\",\n              longitude: \"Unknown\",\n            };\n          }\n          if (meteoriteCopy.year) {\n            meteoriteCopy.year = meteoriteCopy.year.slice(0, 4);\n          } else if (!meteoriteCopy.year) {\n            meteoriteCopy.year = \"Unknown\";\n          }\n          if (!meteoriteCopy.mass) {\n            meteoriteCopy.mass = \"Unknown\";\n          }\n\n          meteoriteCopy.mass = parseFloat(meteoriteCopy.mass).toFixed(0);\n\n          return meteoriteCopy;\n        });\n        const slicedMeteorites = [...meteoriteData].slice(0, 100);\n        this.setState({\n          isLoading: false,\n          meteorites: meteoriteData,\n          largestMeteorites: slicedMeteorites,\n        });\n      });\n  };\n\n  getLargest100 = () => {\n    this.setState((currentState) => {\n      return {\n        showLargest100: !currentState.showLargest100,\n      };\n    });\n  };\n\n  toggleHeatMap = () => {\n    this.setState((currentState) => {\n      return { heatMap: !currentState.heatMap };\n    });\n  };\n\n  changeDropdown = (event) => {\n    if (event.target.value !== this.state.doughnutDataVal) {\n      this.setState({ doughnutDataVal: event.target.value });\n    }\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    const {\n      meteorites,\n      largestMeteorites,\n      doughnutDataVal,\n      isLoading,\n      heatMap,\n      showLargest100,\n    } = this.state;\n\n    let selectedMeteorites;\n\n    if (showLargest100 === true) {\n      selectedMeteorites = largestMeteorites;\n    } else {\n      selectedMeteorites = meteorites;\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Meteorite Landings</h1>\n        <button className=\"heatButton\" onClick={this.toggleHeatMap}>\n          Heat Map\n        </button>\n        {isLoading === true ? (\n          <p>...loading...</p>\n        ) : (\n          <MakeMap meteorites={selectedMeteorites} heatMap={heatMap} />\n        )}\n        <div className=\"tableChart\">\n          <div className=\"table-area\">\n            <button className=\"largest100Button\" onClick={this.getLargest100}>\n              {showLargest100 ? \"Show Largest 1000\" : \"Show Largest 100 Only\"}\n            </button>\n            {isLoading === true ? (\n              <p>...loading...</p>\n            ) : (\n              <MeteoriteTable meteorites={selectedMeteorites} />\n            )}\n          </div>\n          <div className=\"doughnutArea\">\n            <label>\n              Doughnut Data:{\" \"}\n              <select id=\"\" onChange={this.changeDropdown}>\n                <option value=\"sizeRange\">Size Range</option>\n                <option value=\"hemisphere\">Hemisphere</option>\n                <option value=\"century\">Century</option>\n              </select>\n            </label>\n            <DoDoughnut\n              meteorites={selectedMeteorites}\n              dropdownVal={doughnutDataVal}\n              isLoading={isLoading}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}